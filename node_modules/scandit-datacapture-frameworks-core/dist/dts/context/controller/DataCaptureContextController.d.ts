import EventEmitter from 'eventemitter3';
import { DataCaptureContext } from '../DataCaptureContext';
import { DataCaptureMode } from '../DataCaptureMode';
import { OpenSourceSoftwareLicenseInfo } from '../OpenSourceSoftwareLicenseInfo';
import { NativeCallResult } from '../../common';
import { BaseNewController } from '../../controllers/BaseNewController';
export interface DataCaptureContextProxy {
    get framework(): string;
    get frameworkVersion(): string;
    $contextFromJSON({ contextJson }: {
        contextJson: string;
    }): Promise<NativeCallResult>;
    $updateContextFromJSON({ contextJson }: {
        contextJson: string;
    }): Promise<void>;
    $subscribeContextListener(): void;
    $unsubscribeContextListener(): Promise<void>;
    $addModeToContext({ modeJson }: {
        modeJson: string;
    }): Promise<void>;
    $removeModeFromContext({ modeJson }: {
        modeJson: string;
    }): Promise<void>;
    $removeAllModes(): Promise<void>;
    $getOpenSourceSoftwareLicenseInfo(): Promise<NativeCallResult>;
    $disposeContext(): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export declare enum DataCaptureContextEvents {
    didChangeStatus = "DataCaptureContextListener.onStatusChanged",
    didStartObservingContext = "DataCaptureContextListener.onObservationStarted"
}
export declare class DataCaptureContextController extends BaseNewController<DataCaptureContextProxy> {
    private context;
    private _listenerRegistered;
    get framework(): string;
    get frameworkVersion(): string;
    private get privateContext();
    static forDataCaptureContext(context: DataCaptureContext): DataCaptureContextController;
    private constructor();
    updateContextFromJSON(): Promise<void>;
    addModeToContext(mode: DataCaptureMode): Promise<void>;
    removeModeFromContext(mode: DataCaptureMode): Promise<void>;
    removeAllModesFromContext(): Promise<void>;
    dispose(): void;
    unsubscribeListener(): void;
    initialize(): Promise<void>;
    private initializeContextFromJSON;
    static getOpenSourceSoftwareLicenseInfo(): Promise<OpenSourceSoftwareLicenseInfo>;
    subscribeListener(): void;
    private handleDidChangeStatusEvent;
    private handleDidStartObservingContextEvent;
    private notifyListenersOfDeserializationError;
    private notifyListenersOfDidChangeStatus;
}
