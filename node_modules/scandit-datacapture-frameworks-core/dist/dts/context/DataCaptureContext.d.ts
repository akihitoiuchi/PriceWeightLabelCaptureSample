import { BaseDataCaptureView } from '../view';
import { FrameSource } from '../frame';
import { DefaultSerializeable } from '../serializable';
import { DataCaptureComponent } from './DataCaptureComponent';
import { DataCaptureContextController } from './controller/DataCaptureContextController';
import { DataCaptureContextCreationOptions } from './DataCaptureContextCreationOptions';
import { DataCaptureContextListener } from './DataCaptureContextListener';
import { DataCaptureContextSettings } from './DataCaptureContextSettings';
import { DataCaptureMode } from './DataCaptureMode';
import { OpenSourceSoftwareLicenseInfo } from './OpenSourceSoftwareLicenseInfo';
export declare class DataCaptureContext extends DefaultSerializeable {
    private licenseKey;
    private deviceName;
    private static _instance;
    static get sharedInstance(): DataCaptureContext;
    private controller;
    private _framework;
    private _frameworkVersion;
    private settings;
    private _frameSource;
    private view;
    private modes;
    private listeners;
    private static get coreDefaults();
    get frameSource(): FrameSource | null;
    static get deviceID(): string | null;
    /**
     * @deprecated
     */
    get deviceID(): string | null;
    static forLicenseKey(licenseKey: string): DataCaptureContext;
    static forLicenseKeyWithSettings(licenseKey: string, settings: DataCaptureContextSettings | null): DataCaptureContext;
    static forLicenseKeyWithOptions(licenseKey: string, options: DataCaptureContextCreationOptions | null): DataCaptureContext;
    static initialize(licenseKey: string, options?: DataCaptureContextCreationOptions | null, settings?: DataCaptureContextSettings | null): DataCaptureContext;
    private static create;
    private constructor();
    setFrameSource(frameSource: FrameSource | null): Promise<void>;
    addListener(listener: DataCaptureContextListener): void;
    removeListener(listener: DataCaptureContextListener): void;
    addMode(mode: DataCaptureMode): void;
    setMode(mode: DataCaptureMode): void;
    removeCurrentMode(): void;
    removeMode(mode: DataCaptureMode): void;
    removeAllModes(): void;
    dispose(): void;
    applySettings(settings: DataCaptureContextSettings): Promise<void>;
    static getOpenSourceSoftwareLicenseInfo(): Promise<OpenSourceSoftwareLicenseInfo>;
    private update;
}
export interface PrivateDataCaptureContext {
    controller: DataCaptureContextController;
    modes: [DataCaptureMode];
    components: [DataCaptureComponent];
    listeners: DataCaptureContextListener[];
    view: BaseDataCaptureView | null;
    update: () => Promise<void>;
    initialize(): void;
}
