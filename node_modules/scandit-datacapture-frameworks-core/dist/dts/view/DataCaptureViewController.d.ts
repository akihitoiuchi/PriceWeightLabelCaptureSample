import { NativeCallResult, Point, Quadrilateral } from "../common";
import { BaseDataCaptureView } from "./DataCaptureView";
import { BaseController } from "../BaseController";
export interface DataCaptureViewProxy {
    viewPointForFramePoint({ viewId, pointJson }: {
        viewId: number;
        pointJson: string;
    }): Promise<NativeCallResult>;
    viewQuadrilateralForFrameQuadrilateral({ viewId, quadrilateralJson }: {
        viewId: number;
        quadrilateralJson: string;
    }): Promise<NativeCallResult>;
    registerListenerForViewEvents(viewId: number): void;
    unregisterListenerForViewEvents(viewId: number): void;
    subscribeDidChangeSize?(): void;
    setPositionAndSize(top: number, left: number, width: number, height: number, shouldBeUnderWebView: boolean): Promise<void>;
    show(): Promise<void>;
    hide(): Promise<void>;
    createView(viewJson: string): Promise<void>;
    updateView(viewJson: string): Promise<void>;
    removeView(viewId: number): Promise<void>;
}
export declare enum DataCaptureViewEvents {
    didChangeSize = "DataCaptureViewListener.onSizeChanged"
}
export declare class DataCaptureViewController extends BaseController<DataCaptureViewProxy> {
    private view;
    static forDataCaptureView(view: BaseDataCaptureView, autoCreateNativeView: boolean): DataCaptureViewController;
    private constructor();
    viewPointForFramePoint(point: Point): Promise<Point>;
    viewQuadrilateralForFrameQuadrilateral(quadrilateral: Quadrilateral): Promise<Quadrilateral>;
    setPositionAndSize(top: number, left: number, width: number, height: number, shouldBeUnderWebView: boolean): Promise<void>;
    show(): Promise<void>;
    hide(): Promise<void>;
    createNativeView(): Promise<void>;
    removeNativeView(): Promise<void>;
    private createView;
    updateView(): Promise<void>;
    dispose(): void;
    subscribeListener(): void;
    unsubscribeListener(): void;
    private isViewCreated;
}
