import { EventEmitter } from "./EventEmitter";
import { NativeCaller, ProxyEvent } from "./proxies";
export declare class BaseController<PROXY> {
    protected eventEmitter: EventEmitter;
    private proxyName;
    protected get _proxy(): PROXY;
    constructor(proxyName: string);
}
export declare class BaseNativeProxy {
    protected eventEmitter: EventEmitter;
    constructor();
}
/**
 * AdvancedNativeProxy will provide an easy way to communicate between native proxies
 * and other parts of the architecture such as the controller layer
 */
export declare class AdvancedNativeProxy extends BaseNativeProxy {
    protected nativeCaller: NativeCaller;
    protected events: ProxyEvent[];
    protected eventSubscriptions: Map<string, any>;
    [k: string]: any;
    constructor(nativeCaller: NativeCaller, events?: ProxyEvent[]);
    dispose(): Promise<void>;
    _call(fnName: string, args: object | undefined | null): Promise<any>;
    private _registerEvent;
    private _unregisterEvent;
}
/**
 * Function to create a custom AdvancedNativeProxy. This will return an object which will provide dynamically the
 * methods specified in the PROXY interface.
 *
 * The Proxy interface implemented in order to call native methods will require a special mark
 * `$methodName` for method calls
 * `on$methodName` for the listeners added to the events defined in eventsEnum
 * @param nativeCaller
 * @param eventsEnum
 */
export declare function createAdvancedNativeProxy<PROXY>(nativeCaller: NativeCaller, eventsEnum?: any): PROXY;
/**
 * Function to create a custom AdvancedNativeProxy. This will return an object which will provide dynamically the
 * methods specified in the PROXY interface.
 *
 * The Proxy interface implemented in order to call native methods will require a special mark
 * `$methodName` for method calls
 * `on$methodName` for the listeners added to the events defined in eventsEnum
 * @param klass
 * @param nativeCaller
 * @param eventsEnum
 */
export declare function createAdvancedNativeFromCtorProxy<PROXY>(klass: new (nativeCaller: NativeCaller, events: ProxyEvent[]) => Partial<PROXY>, nativeCaller: NativeCaller, eventsEnum?: any): PROXY;
