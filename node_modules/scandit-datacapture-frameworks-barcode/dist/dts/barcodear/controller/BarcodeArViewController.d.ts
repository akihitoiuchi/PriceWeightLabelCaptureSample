import { BaseNewController, EventEmitter } from 'scandit-datacapture-frameworks-core';
import { BarcodeAr } from '../BarcodeAr';
import { BaseBarcodeArView } from '../BarcodeArView';
export declare enum BarcodeArViewEvents {
    didTapHighlightForBarcode = "BarcodeArViewUiListener.didTapHighlightForBarcode"
}
export declare enum BarcodeArHighlightProviderEvents {
    highlightForBarcode = "BarcodeArHighlightProvider.highlightForBarcode"
}
export declare enum BarcodeArAnnotationProviderEvents {
    annotationForBarcode = "BarcodeArAnnotationProvider.annotationForBarcode",
    didTapInfoAnnotationRightIconEvent = "BarcodeArInfoAnnotationListener.didTapInfoAnnotationRightIcon",
    didTapInfoAnnotationLeftIconEvent = "BarcodeArInfoAnnotationListener.didTapInfoAnnotationLeftIcon",
    didTapInfoAnnotationEvent = "BarcodeArInfoAnnotationListener.didTapInfoAnnotation",
    didTapInfoAnnotationHeaderEvent = "BarcodeArInfoAnnotationListener.didTapInfoAnnotationHeader",
    didTapInfoAnnotationFooterEvent = "BarcodeArInfoAnnotationListener.didTapInfoAnnotationFooter",
    didTapPopoverEvent = "BarcodeArPopoverAnnotationListener.didTapPopover",
    didTapPopoverButtonEvent = "BarcodeArPopoverAnnotationListener.didTapPopoverButton"
}
export declare enum BarcodeArEvents {
    didUpdateSession = "BarcodeArListener.didUpdateSession"
}
export interface BarcodeArViewProxy {
    $registerBarcodeArViewUiListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeArViewUiListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $registerBarcodeArAnnotationProvider({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeArAnnotationProvider({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $registerBarcodeArHighlightProvider({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeArHighlightProvider({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeArViewStart({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeArViewStop({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeArViewPause({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeArViewReset({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $updateBarcodeArView({ viewId, viewJson }: {
        viewId: number;
        viewJson: string;
    }): Promise<void>;
    $createBarcodeArView({ viewId, viewJson }: {
        viewId: number;
        viewJson: string;
    }): Promise<void>;
    $removeBarcodeArView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $finishBarcodeArAnnotationForBarcode({ viewId, annotationJson }: {
        viewId: number;
        annotationJson: string;
    }): Promise<void>;
    $finishBarcodeArHighlightForBarcode({ viewId, highlightJson }: {
        viewId: number;
        highlightJson: string;
    }): Promise<void>;
    $updateBarcodeArHighlight({ viewId, highlightJson }: {
        viewId: number;
        highlightJson: string;
    }): Promise<void>;
    $updateBarcodeArAnnotation({ viewId, annotationJson }: {
        viewId: number;
        annotationJson: string;
    }): Promise<void>;
    $updateBarcodeArPopoverButtonAtIndex({ viewId, updateJson }: {
        viewId: number;
        updateJson: string;
    }): Promise<void>;
    $updateBarcodeArMode({ viewId, barcodeArJson }: {
        viewId: number;
        barcodeArJson: string;
    }): Promise<void>;
    $updateBarcodeArFeedback({ viewId, feedbackJson }: {
        viewId: number;
        feedbackJson: string;
    }): void;
    $resetBarcodeAr({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $registerBarcodeArListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeArListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $finishBarcodeArOnDidUpdateSession({ viewId }: {
        viewId: number;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export declare class BarcodeArViewController extends BaseNewController<BarcodeArViewProxy> {
    private baseView;
    private barcodeAr;
    private eventHandlers;
    private boundHandleDidUpdateSession;
    private boundHandleDidTapHighlightForBarcode;
    private boundHandleAnnotationForBarcode;
    private boundHandleDidTapPopoverEvent;
    private boundHandleDidTapPopoverButtonEvent;
    private boundHandleDidTapInfoAnnotationRightIconEvent;
    private boundHandleDidTapInfoAnnotationLeftIconEvent;
    private boundHandleDidTapInfoAnnotationEvent;
    private boundHandleDidTapInfoAnnotationHeaderEvent;
    private boundHandleDidTapInfoAnnotationFooterEvent;
    private boundHandleHighlightForBarcode;
    private constructor();
    dispose(): void;
    static forBarcodeArView(barcodeAr: BarcodeAr, baseView: BaseBarcodeArView): BarcodeArViewController;
    private initialize;
    private createView;
    createNativeView(): Promise<void>;
    registerModeListener(): Promise<void>;
    unregisterModeListener(): Promise<void>;
    registerUiListener(): Promise<void>;
    unregisterUiListener(): Promise<void>;
    registerAnnotationProvider(): Promise<void>;
    unregisterAnnotationProvider(): Promise<void>;
    registerHighlightProvider(): Promise<void>;
    unregisterHighlightProvider(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    pause(): Promise<void>;
    update(): Promise<void>;
    removeNativeView(): Promise<void>;
    reset(): Promise<void>;
    updateMode(): Promise<void>;
    resetMode(): Promise<void>;
    updateFeedback(feedbackJson: string): void;
    private get isViewCreated();
}
