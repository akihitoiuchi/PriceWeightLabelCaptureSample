import { Anchor, CameraSettings, DataCaptureContext, DefaultSerializeable } from "scandit-datacapture-frameworks-core";
import { BarcodeAr } from "./BarcodeAr";
import { BarcodeArViewSettings } from "./BarcodeArViewSettings";
import { BarcodeArViewUiListener } from "./BarcodeArViewUiListener";
import { BarcodeArAnnotationProvider } from "./BarcodeArAnnotationProvider";
import { BarcodeArHighlightProvider } from "./BarcodeArHighlightProvider";
export interface BarcodeArView {
}
export declare class BaseBarcodeArView extends DefaultSerializeable {
    private static get barcodeArDefaults();
    private _annotationProvider;
    private _barcodeArViewUiListener;
    private _highlightProvider;
    nativeView: BarcodeArView | null;
    private _barcodeAr;
    private _isStarted;
    private _barcodeArViewSettings?;
    private _cameraSettings?;
    private _dataCaptureContext;
    private _shouldShowMacroControl;
    private _macroModeControlPosition;
    private _shouldShowTorchControl;
    private _torchControlPosition;
    private _shouldShowZoomControl;
    private _zoomControlPosition;
    private isViewCreated;
    private controller;
    constructor(context: DataCaptureContext, barcodeAr: BarcodeAr, nativeView?: BarcodeArView | null, barcodeArViewSettings?: BarcodeArViewSettings, cameraSettings?: CameraSettings, annotationProvider?: BarcodeArAnnotationProvider, highlightProvider?: BarcodeArHighlightProvider, uiListener?: BarcodeArViewUiListener);
    dispose(): void;
    createNativeView(viewId: number): Promise<void>;
    removeNativeView(): Promise<void>;
    private updateNative;
    private _viewId;
    get viewId(): number;
    get barcodeArViewUiListener(): BarcodeArViewUiListener | null;
    set barcodeArViewUiListener(value: BarcodeArViewUiListener | null);
    get annotationProvider(): BarcodeArAnnotationProvider | null;
    set annotationProvider(value: BarcodeArAnnotationProvider | null);
    get highlightProvider(): BarcodeArHighlightProvider | null;
    set highlightProvider(value: BarcodeArHighlightProvider | null);
    get context(): DataCaptureContext;
    start(): Promise<void>;
    stop(): Promise<void>;
    pause(): Promise<void>;
    reset(): Promise<void>;
    get shouldShowTorchControl(): boolean;
    set shouldShowTorchControl(value: boolean);
    get torchControlPosition(): Anchor;
    set torchControlPosition(value: Anchor);
    get shouldShowZoomControl(): boolean;
    set shouldShowZoomControl(value: boolean);
    get zoomControlPosition(): Anchor;
    set zoomControlPosition(value: Anchor);
    get shouldShowCameraSwitchControl(): boolean;
    set shouldShowCameraSwitchControl(value: boolean);
    get cameraSwitchControlPosition(): Anchor;
    set cameraSwitchControlPosition(value: Anchor);
    get shouldShowMacroModeControl(): boolean;
    set shouldShowMacroModeControl(value: boolean);
    get macroModeControlPosition(): Anchor;
    set macroModeControlPosition(value: Anchor);
    toJSON(): object;
}
