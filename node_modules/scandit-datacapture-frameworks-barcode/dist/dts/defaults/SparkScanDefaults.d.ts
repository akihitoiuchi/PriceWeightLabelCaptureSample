import { Brush, Color, Feedback, LocationSelection, TorchState, CameraPosition } from "scandit-datacapture-frameworks-core";
import { SparkScanScanningMode } from "../sparkscan/SparkScanScanningMode";
import { BatterySavingMode } from "../barcode";
import { ScanIntention } from "scandit-datacapture-frameworks-core";
import { SparkScanMiniPreviewSize } from "../sparkscan";
export interface SparkScanViewSettingsDefaults {
    triggerButtonCollapseTimeout: number;
    defaultScanningMode: SparkScanScanningMode;
    defaultTorchState: TorchState;
    soundEnabled: boolean;
    hapticEnabled: boolean;
    holdToScanEnabled: boolean;
    hardwareTriggerEnabled: boolean;
    hardwareTriggerKeyCode: number | null;
    visualFeedbackEnabled: boolean;
    toastSettings: SparkScanToastSettingsDefaults;
    targetZoomFactorOut: number;
    targetZoomFactorIn: number;
    zoomFactorOut: number;
    zoomFactorIn: number;
    inactiveStateTimeout: number;
    defaultCameraPosition: CameraPosition;
    defaultMiniPreviewSize: SparkScanMiniPreviewSize;
}
export interface SparkScanToastSettingsDefaults {
    toastEnabled: boolean;
    toastBackgroundColor: Color | null;
    toastTextColor: Color | null;
    targetModeEnabledMessage: string | null;
    targetModeDisabledMessage: string | null;
    continuousModeEnabledMessage: string | null;
    continuousModeDisabledMessage: string | null;
    worldFacingCameraEnabledMessage: string | null;
    userFacingCameraEnabledMessage: string | null;
    scanPausedMessage: string | null;
    zoomedInMessage: string | null;
    zoomedOutMessage: string | null;
    torchEnabledMessage: string | null;
    torchDisabledMessage: string | null;
}
export interface SparkScanDefaults {
    Feedback: {
        success: {
            visualFeedbackColor: Color;
            brush: Brush;
            feedbackDefault: Feedback;
        };
        error: {
            visualFeedbackColor: Color;
            brush: Brush;
            feedbackDefault: Feedback;
        };
    };
    SparkScanSettings: {
        batterySaving: BatterySavingMode;
        codeDuplicateFilter: number;
        locationSelection: LocationSelection;
        scanIntention: ScanIntention;
    };
    SparkScanView: {
        brush: Brush;
        scanningBehaviorButtonVisible: boolean;
        barcodeCountButtonVisible: boolean;
        barcodeFindButtonVisible: boolean;
        targetModeButtonVisible: boolean;
        labelCaptureButtonVisible: boolean;
        previewSizeControlVisible: boolean;
        triggerButtonAnimationColor: Color | null;
        triggerButtonExpandedColor: Color | null;
        triggerButtonCollapsedColor: Color | null;
        triggerButtonTintColor: Color | null;
        triggerButtonVisible: boolean;
        triggerButtonImage: string | null;
        toolbarBackgroundColor: Color | null;
        toolbarIconActiveTintColor: Color | null;
        toolbarIconInactiveTintColor: Color | null;
        SparkScanViewSettings: SparkScanViewSettingsDefaults;
        cameraSwitchButtonVisible: boolean;
        torchControlVisible: boolean;
    };
}
export declare function parseSparkScanDefaults(jsonDefaults: any): SparkScanDefaults;
