import { NativeCallResult, BaseNewController, EventPayload } from "scandit-datacapture-frameworks-core";
import { Barcode } from "../../barcode/Barcode";
import { BarcodeSelection } from "../BarcodeSelection";
export declare enum BarcodeSelectionListenerEvents {
    didUpdateSelection = "BarcodeSelectionListener.didUpdateSelection",
    didUpdateSession = "BarcodeSelectionListener.didUpdateSession"
}
export interface BarcodeSelectionListenerProxy {
    $setBarcodeSelectionModeEnabledState: () => boolean;
    $getCountForBarcodeInBarcodeSelectionSession({ selectionIdentifier }: {
        selectionIdentifier: string;
    }): Promise<NativeCallResult>;
    $resetBarcodeSelectionSession(): Promise<void>;
    $registerBarcodeSelectionListenerForEvents(): void;
    $finishBarcodeSelectionDidSelect({ enabled }: {
        enabled: boolean;
    }): void;
    $finishBarcodeSelectionDidUpdateSession({ enabled }: {
        enabled: boolean;
    }): void;
    on$didUpdateSelection(ev: EventPayload): void;
    on$didUpdateSession(ev: EventPayload): void;
    $unregisterBarcodeSelectionListenerForEvents(): void;
    dispose(): Promise<void>;
}
export interface BarcodeSelectionSessionEventPayload {
    session: string;
    frameId: string | null;
}
export declare class BarcodeSelectionListenerController extends BaseNewController<BarcodeSelectionListenerProxy> {
    private barcodeSelection;
    static forBarcodeSelection(barcodeSelection: BarcodeSelection): BarcodeSelectionListenerController;
    constructor();
    getCount(barcode: Barcode): Promise<number>;
    reset(): Promise<void>;
    subscribeListener(): void;
    unsubscribeListener(): void;
    private notifyListenersOfDidUpdateSelection;
    private notifyListenersOfDidUpdateSession;
}
