import { BaseNewController, EventPayload } from "scandit-datacapture-frameworks-core";
import { BarcodeSelectionBrushProvider } from "../BarcodeSelectionBrushProvider";
import { BarcodeSelectionBasicOverlay } from "../BarcodeSelectionBasicOverlay";
export declare enum BarcodeSelectionBrushProviderEvents {
    brushForAimedBarcode = "BarcodeSelectionAimedBrushProvider.brushForBarcode",
    brushForTrackedBarcode = "BarcodeSelectionTrackedBrushProvider.brushForBarcode"
}
export interface BarcodeSelectionOverlayProxy {
    $setBarcodeSelectionModeEnabledState: () => boolean;
    $setTextForAimToSelectAutoHint({ text }: {
        text: string;
    }): Promise<void>;
    $removeAimedBarcodeBrushProvider(): Promise<void>;
    $setAimedBarcodeBrushProvider(): Promise<void>;
    $finishBrushForAimedBarcodeCallback({ brushJson, selectionIdentifier }: {
        brushJson: string | null;
        selectionIdentifier: string;
    }): void;
    $removeTrackedBarcodeBrushProvider(): Promise<void>;
    $setTrackedBarcodeBrushProvider(): Promise<void>;
    $finishBrushForTrackedBarcodeCallback({ brushJson, selectionIdentifier }: {
        brushJson: string | null;
        selectionIdentifier: string;
    }): void;
    $updateBarcodeSelectionBasicOverlay({ overlayJson }: {
        overlayJson: string;
    }): Promise<void>;
    on$brushForAimedBarcode: (ev: EventPayload) => void;
    on$brushForTrackedBarcode: (ev: EventPayload) => void;
    dispose(): Promise<void>;
}
export declare class BarcodeSelectionOverlayController extends BaseNewController<BarcodeSelectionOverlayProxy> {
    constructor();
    setTextForAimToSelectAutoHint(text: string): Promise<void>;
    setAimedBarcodeBrushProvider(brushProvider: BarcodeSelectionBrushProvider | null): Promise<void>;
    setTrackedBarcodeBrushProvider(brushProvider: BarcodeSelectionBrushProvider | null): Promise<void>;
    updateBarcodeSelectionBasicOverlay(overlay: BarcodeSelectionBasicOverlay): Promise<void>;
    unsubscribeProviders(): void;
}
