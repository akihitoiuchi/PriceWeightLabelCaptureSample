import { BaseNewController } from "scandit-datacapture-frameworks-core";
import { Barcode } from "../../barcode";
import { BarcodeSelection } from "../BarcodeSelection";
import { BarcodeSelectionSettings } from "../BarcodeSelectionSettings";
export interface BarcodeSelectionProxy {
    $unfreezeCameraInBarcodeSelection(): Promise<void>;
    $resetBarcodeSelection(): Promise<void>;
    $selectAimedBarcode(): Promise<void>;
    $unselectBarcodes({ barcodesJson }: {
        barcodesJson: string;
    }): Promise<void>;
    $setSelectBarcodeEnabled({ barcodeJson, enabled }: {
        barcodeJson: string;
        enabled: boolean;
    }): Promise<void>;
    $increaseCountForBarcodes({ barcodeJson }: {
        barcodeJson: string;
    }): Promise<void>;
    $setBarcodeSelectionModeEnabledState({ enabled }: {
        enabled: boolean;
    }): void;
    $updateBarcodeSelectionMode({ modeJson }: {
        modeJson: string;
    }): Promise<void>;
    $applyBarcodeSelectionModeSettings({ modeSettingsJson }: {
        modeSettingsJson: string;
    }): Promise<void>;
    $updateBarcodeSelectionFeedback({ feedbackJson }: {
        feedbackJson: string;
    }): Promise<void>;
}
export declare class BarcodeSelectionController extends BaseNewController<BarcodeSelectionProxy> {
    constructor();
    unfreezeCamera(): Promise<void>;
    reset(): Promise<void>;
    selectAimedBarcode(): Promise<void>;
    unselectBarcodes(barcodes: Barcode[]): Promise<void>;
    setSelectBarcodeEnabled(barcode: Barcode, enabled: boolean): Promise<void>;
    increaseCountForBarcodes(barcodes: Barcode[]): Promise<void>;
    setModeEnabledState(enabled: boolean): void;
    updateBarcodeSelectionMode(barcodeSelection: BarcodeSelection): Promise<void>;
    applyBarcodeSelectionModeSettings(newSettings: BarcodeSelectionSettings): Promise<void>;
    updateFeedback(feedbackJson: string): void;
    private convertBarcodesToJson;
}
