import { CameraSettings, DataCaptureContext, DataCaptureMode, DefaultSerializeable, PointWithUnit, PrivateDataCaptureMode } from "scandit-datacapture-frameworks-core";
import { Barcode } from "../barcode";
import { BarcodeSelectionFeedback } from "./BarcodeSelectionFeedback";
import { BarcodeSelectionListener } from "./BarcodeSelectionListener";
import { BarcodeSelectionSettings } from "./BarcodeSelectionSettings";
export declare class BarcodeSelection extends DefaultSerializeable implements DataCaptureMode {
    get isEnabled(): boolean;
    set isEnabled(isEnabled: boolean);
    get context(): DataCaptureContext | null;
    get feedback(): BarcodeSelectionFeedback;
    set feedback(feedback: BarcodeSelectionFeedback);
    get pointOfInterest(): PointWithUnit | null;
    set pointOfInterest(pointOfInterest: PointWithUnit | null);
    static get recommendedCameraSettings(): CameraSettings;
    private type;
    private _isEnabled;
    private _feedback;
    private _pointOfInterest;
    private settings;
    private privateContext;
    private get _context();
    private set _context(value);
    private listeners;
    private listenerController;
    private modeController;
    private static get barcodeSelectionDefaults();
    static forContext(context: DataCaptureContext | null, settings: BarcodeSelectionSettings): BarcodeSelection;
    private constructor();
    applySettings(settings: BarcodeSelectionSettings): Promise<void>;
    addListener(listener: BarcodeSelectionListener): void;
    removeListener(listener: BarcodeSelectionListener): void;
    reset(): Promise<void>;
    unfreezeCamera(): Promise<void>;
    selectAimedBarcode(): Promise<void>;
    unselectBarcodes(barcodes: Barcode[]): Promise<void>;
    setSelectBarcodeEnabled(barcode: Barcode, enabled: boolean): Promise<void>;
    increaseCountForBarcodes(barcodes: Barcode[]): Promise<void>;
}
export interface PrivateBarcodeSelection extends PrivateDataCaptureMode {
    _context: DataCaptureContext | null;
    listeners: BarcodeSelectionListener[];
    isInListenerCallback: boolean;
}
