import { BaseNewController, EventEmitter } from "scandit-datacapture-frameworks-core";
import { BarcodeCapture } from "../BarcodeCapture";
import { BarcodeCaptureSettings } from "../BarcodeCaptureSettings";
import { BarcodeCaptureOverlay } from "../BarcodeCaptureOverlay";
export interface BarcodeCaptureListenerProxy {
    $resetBarcodeCaptureSession(): Promise<void>;
    $registerBarcodeCaptureListenerForEvents(): void;
    $unregisterBarcodeCaptureListenerForEvents(): void;
    $finishBarcodeCaptureDidUpdateSession({ enabled }: {
        enabled: boolean;
    }): void;
    $finishBarcodeCaptureDidScan({ enabled }: {
        enabled: boolean;
    }): void;
    $setBarcodeCaptureModeEnabledState({ enabled }: {
        enabled: boolean;
    }): void;
    $updateBarcodeCaptureMode({ modeJson }: {
        modeJson: string;
    }): Promise<void>;
    $applyBarcodeCaptureModeSettings({ modeSettingsJson }: {
        modeSettingsJson: string;
    }): Promise<void>;
    $updateBarcodeCaptureOverlay({ overlayJson }: {
        overlayJson: string;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export declare enum BarcodeCaptureListenerEvents {
    didUpdateSession = "BarcodeCaptureListener.didUpdateSession",
    didScan = "BarcodeCaptureListener.didScan"
}
export interface BarcodeCaptureSessionEventPayload {
    session: string;
    frameId: string | null;
}
export declare class BarcodeCaptureListenerController extends BaseNewController<BarcodeCaptureListenerProxy> {
    private barcodeCapture;
    private isListeningForEvents;
    static forBarcodeCapture(barcodeCapture: BarcodeCapture): BarcodeCaptureListenerController;
    private constructor();
    reset(): Promise<void>;
    setModeEnabledState(enabled: boolean): void;
    updateBarcodeCaptureMode(): Promise<void>;
    applyBarcodeCaptureModeSettings(newSettings: BarcodeCaptureSettings): Promise<void>;
    updateBarcodeCaptureOverlay(overlay: BarcodeCaptureOverlay): Promise<void>;
    subscribeListener(): void;
    unsubscribeListener(): void;
    dispose(): void;
    private handleDidUpdateSession;
    private handleDidScan;
    private notifyListenersOfDidUpdateSession;
    private notifyListenersOfDidScan;
}
