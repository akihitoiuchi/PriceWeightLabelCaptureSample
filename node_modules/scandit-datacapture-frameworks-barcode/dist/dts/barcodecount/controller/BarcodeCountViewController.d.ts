import { BaseBarcodeCountView } from "../BarcodeCountView";
import { BarcodeCount } from "../BarcodeCount";
import { BarcodeCountViewUiListener } from "../BarcodeCountViewUiListener";
import { BarcodeCountViewListener } from "../BarcodeCountViewListener";
import { TrackedBarcode } from "../../barcode";
import { BaseNewController, Brush, EventPayload } from "scandit-datacapture-frameworks-core";
import { BarcodeCountCaptureList } from "../BarcodeCountCaptureList";
export declare enum BarcodeCountViewEvents {
    singleScanButtonTapped = "BarcodeCountViewUiListener.onSingleScanButtonTapped",
    listButtonTapped = "BarcodeCountViewUiListener.onListButtonTapped",
    exitButtonTapped = "BarcodeCountViewUiListener.onExitButtonTapped",
    brushForRecognizedBarcode = "BarcodeCountViewListener.brushForRecognizedBarcode",
    brushForRecognizedBarcodeNotInList = "BarcodeCountViewListener.brushForRecognizedBarcodeNotInList",
    brushForAcceptedBarcode = "BarcodeCountViewListener.brushForAcceptedBarcode",
    brushForRejectedBarcode = "BarcodeCountViewListener.brushForRejectedBarcode",
    filteredBarcodeTapped = "BarcodeCountViewListener.didTapFilteredBarcode",
    recognizedBarcodeNotInListTapped = "BarcodeCountViewListener.didTapRecognizedBarcodeNotInList",
    recognizedBarcodeTapped = "BarcodeCountViewListener.didTapRecognizedBarcode",
    acceptedBarcodeTapped = "BarcodeCountViewListener.didTapAcceptedBarcode",
    rejectedBarcodeTapped = "BarcodeCountViewListener.didTapRejectedBarcode",
    captureListCompleted = "BarcodeCountViewListener.didCompleteCaptureList",
    didUpdateSession = "BarcodeCountCaptureListListener.didUpdateSession",
    didScan = "BarcodeCountListener.onScan"
}
export interface BarcodeCountViewProxy {
    $createBarcodeCountView({ viewId, viewJson }: {
        viewId: number;
        viewJson: string;
    }): Promise<void>;
    $removeBarcodeCountView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $updateBarcodeCountView({ viewId, viewJson }: {
        viewId: number;
        viewJson: string;
    }): Promise<void>;
    $disposeBarcodeCountView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $registerBarcodeCountViewListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeCountViewListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $registerBarcodeCountViewUiListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeCountViewUiListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $clearBarcodeCountHighlights({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $finishBarcodeCountBrushForRecognizedBarcode({ viewId, brushJson, trackedBarcodeId }: {
        viewId: number;
        brushJson: string | null;
        trackedBarcodeId: number;
    }): Promise<void>;
    $finishBarcodeCountBrushForRecognizedBarcodeNotInList({ viewId, brushJson, trackedBarcodeId }: {
        viewId: number;
        brushJson: string | null;
        trackedBarcodeId: number;
    }): Promise<void>;
    $finishBarcodeCountBrushForAcceptedBarcode({ viewId, brushJson, trackedBarcodeId }: {
        viewId: number;
        brushJson: string | null;
        trackedBarcodeId: number;
    }): Promise<void>;
    $finishBarcodeCountBrushForRejectedBarcode({ viewId, brushJson, trackedBarcodeId }: {
        viewId: number;
        brushJson: string | null;
        trackedBarcodeId: number;
    }): Promise<void>;
    $setBarcodeCountViewPositionAndSize({ top, left, width, height, shouldBeUnderWebView }: {
        top: number;
        left: number;
        width: number;
        height: number;
        shouldBeUnderWebView: boolean;
    }): Promise<void>;
    $showBarcodeCountView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $hideBarcodeCountView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $enableBarcodeCountHardwareTrigger({ viewId, hardwareTriggerKeyCode }: {
        viewId: number;
        hardwareTriggerKeyCode: number | null;
    }): Promise<void>;
    on$singleScanButtonTapped: (ev: EventPayload) => void;
    on$listButtonTapped: (ev: EventPayload) => void;
    on$exitButtonTapped: (ev: EventPayload) => void;
    on$brushForRecognizedBarcode: (ev: EventPayload) => Promise<void>;
    on$brushForRecognizedBarcodeNotInList: (ev: EventPayload) => Promise<void>;
    on$brushForAcceptedBarcode: (ev: EventPayload) => Promise<void>;
    on$brushForRejectedBarcode: (ev: EventPayload) => Promise<void>;
    on$filteredBarcodeTapped: (ev: EventPayload) => Promise<void>;
    on$recognizedBarcodeNotInListTapped: (ev: EventPayload) => Promise<void>;
    on$recognizedBarcodeTapped: (ev: EventPayload) => Promise<void>;
    on$acceptedBarcodeTapped: (ev: EventPayload) => Promise<void>;
    on$rejectedBarcodeTapped: (ev: EventPayload) => Promise<void>;
    on$captureListCompleted: (ev: EventPayload) => void;
    $updateBarcodeCountMode({ viewId, barcodeCountJson }: {
        viewId: number;
        barcodeCountJson: string;
    }): Promise<void>;
    $resetBarcodeCount({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $registerBarcodeCountListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeCountListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $finishBarcodeCountOnScan({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $startBarcodeCountScanningPhase({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $endBarcodeCountScanningPhase({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $setBarcodeCountCaptureList({ viewId, captureListJson }: {
        viewId: number;
        captureListJson: string;
    }): Promise<void>;
    $setBarcodeCountModeEnabledState({ viewId, isEnabled }: {
        viewId: number;
        isEnabled: boolean;
    }): Promise<void>;
    $updateBarcodeCountFeedback({ viewId, feedbackJson }: {
        viewId: number;
        feedbackJson: string;
    }): Promise<void>;
    on$didUpdateSession: (ev: EventPayload) => Promise<void>;
    on$didScan: (ev: EventPayload) => Promise<void>;
    dispose(): void;
}
export declare class BarcodeCountViewController extends BaseNewController<BarcodeCountViewProxy> {
    static forBarcodeCountAndBarcodeCountView(view: BaseBarcodeCountView, barcodeCount: BarcodeCount): BarcodeCountViewController;
    view: BaseBarcodeCountView;
    private barcodeCount;
    private eventHandlers;
    private constructor();
    private initialize;
    registerModeListener(): void;
    registerUiListener(): void;
    registerViewListener(): void;
    update(): Promise<void>;
    createNativeView(): Promise<void>;
    removeNativeView(): Promise<void>;
    private createView;
    setUiListener(listener: BarcodeCountViewUiListener | null): Promise<void>;
    setViewListener(listener: BarcodeCountViewListener | null): Promise<void>;
    clearHighlights(): Promise<void>;
    dispose(): Promise<void>;
    setPositionAndSize(top: number, left: number, width: number, height: number, shouldBeUnderWebView: boolean): Promise<void>;
    show(): Promise<void>;
    hide(): Promise<void>;
    setBrushForRecognizedBarcode(trackedBarcode: TrackedBarcode, brush: Brush | null): Promise<void>;
    setBrushForRecognizedBarcodeNotInList(trackedBarcode: TrackedBarcode, brush: Brush | null): Promise<void>;
    setBrushForAcceptedBarcode(trackedBarcode: TrackedBarcode, brush: Brush | null): Promise<void>;
    setBrushForRejectedBarcode(trackedBarcode: TrackedBarcode, brush: Brush | null): Promise<void>;
    enableHardwareTrigger(hardwareTriggerKeyCode: number | null): Promise<void>;
    private buildTrackedBarcodeBrushPayload;
    private setupEventListeners;
    private unsubscribeListeners;
    updateMode(): Promise<void>;
    reset(): Promise<void>;
    setModeEnabledState(enabled: boolean): void;
    removeModeListener(): Promise<void>;
    startScanningPhase(): void;
    endScanningPhase(): void;
    updateFeedback(feedbackJson: string): void;
    setBarcodeCountCaptureList(barcodeCountCaptureList: BarcodeCountCaptureList): void;
    private get isViewCreated();
}
