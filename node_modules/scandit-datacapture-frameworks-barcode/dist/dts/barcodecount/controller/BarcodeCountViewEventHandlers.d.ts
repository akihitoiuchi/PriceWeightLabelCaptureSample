import { EventPayload } from "scandit-datacapture-frameworks-core";
import { BarcodeCountViewProxy } from "./BarcodeCountViewController";
import { BaseBarcodeCountView } from "../BarcodeCountView";
import { BarcodeCount } from "../BarcodeCount";
import { BarcodeCountCaptureList } from "../BarcodeCountCaptureList";
export interface BarcodeCountSessionEventPayload {
    session: string;
    frameId: string | null;
    viewId: number;
}
export interface BarcodeCountViewEventPayload {
    viewId: number;
}
export declare class BarcodeCountViewEventHandlers {
    private view;
    private barcodeCount;
    private proxy;
    constructor(view: BaseBarcodeCountView, barcodeCount: BarcodeCount, proxy: BarcodeCountViewProxy);
    handleSingleScanButtonTapped(ev: EventPayload): void;
    handleListButtonTapped(ev: EventPayload): void;
    handleExitButtonTapped(ev: EventPayload): void;
    handleBrushForRecognizedBarcode(ev: EventPayload): Promise<void>;
    handleBrushForRecognizedBarcodeNotInList(ev: EventPayload): Promise<void>;
    handleBrushForAcceptedBarcode(ev: EventPayload): Promise<void>;
    handleBrushForRejectedBarcode(ev: EventPayload): Promise<void>;
    handleFilteredBarcodeTapped(ev: EventPayload): Promise<void>;
    handleRecognizedBarcodeNotInListTapped(ev: EventPayload): Promise<void>;
    handleRecognizedBarcodeTapped(ev: EventPayload): Promise<void>;
    handleAcceptedBarcodeTapped(ev: EventPayload): Promise<void>;
    handleRejectedBarcodeTapped(ev: EventPayload): Promise<void>;
    handleCaptureListCompleted(ev: EventPayload): void;
    handleDidScan(ev: EventPayload): Promise<void>;
    handleDidUpdateSession(ev: EventPayload): Promise<void>;
    private buildTrackedBarcodeBrushPayload;
    private notifyListenersOfDidScanSession;
    private _barcodeCountCaptureList;
    setBarcodeCountCaptureList(barcodeCountCaptureList: BarcodeCountCaptureList): void;
    private notifyListenersOfDidListSessionUpdate;
}
