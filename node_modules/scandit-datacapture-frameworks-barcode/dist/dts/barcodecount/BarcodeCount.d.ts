import { DefaultSerializeable, DataCaptureMode, DataCaptureContext, CameraSettings } from "scandit-datacapture-frameworks-core";
import { Barcode } from "../barcode";
import { BarcodeCountFeedback } from "./BarcodeCountFeedback";
import { BarcodeCountSettings } from "./BarcodeCountSettings";
import { BarcodeCountListener } from "./BarcodeCountListener";
import { BarcodeCountCaptureList } from "./BarcodeCountCaptureList";
import { BarcodeCountViewController } from "./controller/BarcodeCountViewController";
export declare class BarcodeCount extends DefaultSerializeable implements DataCaptureMode {
    get isEnabled(): boolean;
    set isEnabled(isEnabled: boolean);
    get context(): DataCaptureContext | null;
    get feedback(): BarcodeCountFeedback;
    set feedback(feedback: BarcodeCountFeedback);
    private type;
    private _feedback;
    private _isEnabled;
    private _hasListeners;
    private settings;
    private listeners;
    private _additionalBarcodes;
    private privateContext;
    private get _context();
    private set _context(value);
    private _controller;
    private get controller();
    private set controller(value);
    static forContext(context: DataCaptureContext, settings: BarcodeCountSettings): BarcodeCount;
    private static get barcodeCountDefaults();
    applySettings(settings: BarcodeCountSettings): Promise<void>;
    addListener(listener: BarcodeCountListener): void;
    private checkAndSubscribeListeners;
    removeListener(listener: BarcodeCountListener): void;
    private checkAndUnsubscribeListeners;
    reset(): Promise<void>;
    startScanningPhase(): void;
    endScanningPhase(): void;
    setBarcodeCountCaptureList(barcodeCountCaptureList: BarcodeCountCaptureList): void;
    setAdditionalBarcodes(barcodes: Barcode[]): Promise<void>;
    clearAdditionalBarcodes(): Promise<void>;
    static get recommendedCameraSettings(): CameraSettings;
    private didChange;
    private unsubscribeNativeListeners;
}
export interface PrivateBarcodeCount {
    _context: DataCaptureContext | null;
    listeners: BarcodeCountListener[];
    didChange: () => Promise<void>;
    subscribeNativeListeners: () => void;
    unsubscribeNativeListeners: () => void;
    controller: BarcodeCountViewController | null;
    _hasListeners: boolean;
}
