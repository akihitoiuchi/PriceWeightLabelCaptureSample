import { CameraSettings, DataCaptureContext, DataCaptureMode, DefaultSerializeable } from 'scandit-datacapture-frameworks-core';
import { BarcodeFindFeedback } from './BarcodeFindFeedback';
import { BarcodeFindSettings } from './BarcodeFindSettings';
import { BarcodeFindListener } from './BarcodeFindListener';
import { BarcodeFindItem } from './BarcodeFindItem';
import { BarcodeFindTransformer } from './BarcodeFindTransformer';
import { BarcodeFindSession } from './BarcodeFindSession';
import { BarcodeFindViewController } from './controller/BarcodeFindViewController';
export declare class BarcodeFind extends DefaultSerializeable implements DataCaptureMode {
    private type;
    private _feedback;
    private _enabled;
    private _isInCallback;
    private _settings;
    private itemsToFind;
    private _hasBarcodeTransformer;
    private _hasListeners;
    private listeners;
    private _controller;
    private _dataCaptureContext;
    private barcodeTransformer;
    private constructor();
    static forContext(dataCaptureContext: DataCaptureContext, settings: BarcodeFindSettings): BarcodeFind;
    private static get barcodeFindDefaults();
    static get recommendedCameraSettings(): CameraSettings;
    get context(): DataCaptureContext | null;
    get isEnabled(): boolean;
    set isEnabled(value: boolean);
    get feedback(): BarcodeFindFeedback;
    set feedback(value: BarcodeFindFeedback);
    applySettings(settings: BarcodeFindSettings): Promise<void>;
    addListener(listener: BarcodeFindListener): void;
    private checkAndSubscribeListeners;
    removeListener(listener: BarcodeFindListener): void;
    setBarcodeTransformer(barcodeTransformer: BarcodeFindTransformer | null): void;
    private checkAndUnsubscribeListeners;
    setItemList(items: BarcodeFindItem[]): Promise<void>;
    start(): Promise<void>;
    pause(): Promise<void>;
    stop(): Promise<void>;
    private update;
    private get controller();
    private set controller(value);
}
export interface PrivateBarcodeFind {
    itemsToFind: string;
    listeners: BarcodeFindListener[];
    barcodeTransformer: BarcodeFindTransformer;
    session: BarcodeFindSession;
    controller: BarcodeFindViewController | null;
}
