import { BaseNewController, EventEmitter } from 'scandit-datacapture-frameworks-core';
import { BaseBarcodeFindView } from '../BarcodeFindView';
import { BarcodeFindViewUiListener } from '../BarcodeFindViewUiListener';
import { BarcodeFindItem } from '../BarcodeFindItem';
export declare enum BarcodeFindViewEvents {
    onFinishButtonTappedEventName = "BarcodeFindViewUiListener.onFinishButtonTapped"
}
export declare enum BarcodeFindListenerEvents {
    onSearchStartedEvent = "BarcodeFindListener.onSearchStarted",
    onSearchPausedEvent = "BarcodeFindListener.onSearchPaused",
    onSearchStoppedEvent = "BarcodeFindListener.onSearchStopped",
    didUpdateSession = "BarcodeFindListener.didUpdateSession"
}
export declare enum BarcodeFindTransformerEvents {
    onTransformBarcodeData = "BarcodeFindTransformer.transformBarcodeData"
}
export interface BarcodeFindViewProxy {
    $registerBarcodeFindViewListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeFindViewListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $updateFindView({ viewId, barcodeFindViewJson }: {
        viewId: number;
        barcodeFindViewJson: string;
    }): Promise<void>;
    $barcodeFindViewStartSearching({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeFindViewStopSearching({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeFindViewPauseSearching({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $createFindView({ viewId, json }: {
        viewId: number;
        json: string;
    }): Promise<void>;
    $removeFindView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $showFindView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $hideFindView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $updateFindMode({ viewId, barcodeFindJson }: {
        viewId: number;
        barcodeFindJson: string;
    }): Promise<void>;
    $barcodeFindModeStart({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeFindModePause({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeFindModeStop({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $barcodeFindSetItemList({ viewId, itemsJson }: {
        viewId: number;
        itemsJson: string;
    }): Promise<void>;
    $registerBarcodeFindListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodeFindListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $setBarcodeFindModeEnabledState({ viewId, enabled }: {
        viewId: number;
        enabled: boolean;
    }): void;
    $setBarcodeTransformer({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unsetBarcodeTransformer({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $submitBarcodeFindTransformerResult({ viewId, transformedBarcode }: {
        viewId: number;
        transformedBarcode: string | null;
    }): Promise<void>;
    $updateBarcodeFindFeedback({ viewId, feedbackJson }: {
        viewId: number;
        feedbackJson: string;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export interface BarcodeFindSessionEventPayload {
    session: string;
    viewId: number;
}
export declare class BarcodeFindViewController extends BaseNewController<BarcodeFindViewProxy> {
    private baseView;
    private isListenerEnabled;
    private boundHandleOnFinishButtonTappedEvent;
    private boundHandleDidUpdateSession;
    private boundHandleOnSearchStartedEvent;
    private boundHandleOnSearchPausedEvent;
    private boundHandleOnSearchStoppedEvent;
    private boundHandleTransformerEvent;
    private constructor();
    static forBarcodeFindView(baseView: BaseBarcodeFindView): BarcodeFindViewController;
    setUiListener(listener: BarcodeFindViewUiListener | null): Promise<void>;
    startSearching(): Promise<void>;
    stopSearching(): Promise<void>;
    pauseSearching(): Promise<void>;
    updateView(): Promise<void>;
    showView(): Promise<void>;
    hideView(): Promise<void>;
    createNativeView(): Promise<void>;
    removeNativeView(): Promise<void>;
    private create;
    private initialize;
    subscribeViewEvents(): void;
    private handleOnFinishButtonTappedEvent;
    unsubscribeViewEvents(): void;
    updateMode(): Promise<void>;
    setItemList(items: BarcodeFindItem[]): Promise<void>;
    start(): Promise<void>;
    pause(): Promise<void>;
    stop(): Promise<void>;
    setModeEnabledState(isEnabled: boolean): void;
    updateFeedback(feedbackJson: string): Promise<void>;
    setBarcodeTransformer(): Promise<void>;
    private handleOnTransformBarcodeDataEvent;
    unsetBarcodeTransformer(): Promise<void>;
    subscribeModeEvents(): void;
    private handleDidUpdateSession;
    private handleOnSearchStartedEvent;
    private handleOnSearchPausedEvent;
    private handleOnSearchStoppedEvent;
    private filterFoundItemsFromEvent;
    unsubscribeModeEvents(): void;
    dispose(): void;
    private get isViewCreated();
}
