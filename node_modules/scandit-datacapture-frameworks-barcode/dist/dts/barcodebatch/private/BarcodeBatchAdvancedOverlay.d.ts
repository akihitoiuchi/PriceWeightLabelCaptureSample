import { DefaultSerializeable, DataCaptureOverlay, BaseDataCaptureView, DataCaptureView, Anchor, PointWithUnit } from "scandit-datacapture-frameworks-core";
import { TrackedBarcode } from "../../barcode";
import { BarcodeBatch } from "../BarcodeBatch";
import { BarcodeBatchAdvancedOverlayListener } from "./BarcodeBatchAdvancedOverlayListener";
import { BarcodeBatchAdvancedOverlayView } from "./BarcodeBatchAdvancedOverlayView";
export interface BarcodeBatchAdvancedOverlay extends DataCaptureOverlay {
    listener: BarcodeBatchAdvancedOverlayListener | null;
}
export declare class BaseBarcodeBatchAdvancedOverlay extends DefaultSerializeable implements BarcodeBatchAdvancedOverlay {
    type: string;
    private _shouldShowScanAreaGuides;
    get shouldShowScanAreaGuides(): boolean;
    set shouldShowScanAreaGuides(shouldShow: boolean);
    private barcodeBatch;
    private _hasListener;
    private dataCaptureViewId;
    private _listener;
    get listener(): BarcodeBatchAdvancedOverlayListener | null;
    set listener(newListener: BarcodeBatchAdvancedOverlayListener | null);
    private controller;
    private _view;
    set view(newView: BaseDataCaptureView | null);
    get view(): BaseDataCaptureView | null;
    initialize(barcodeBatch: BarcodeBatch, view: DataCaptureView | null): void;
    constructor();
    setViewForTrackedBarcode(view: BarcodeBatchAdvancedOverlayView | Promise<BarcodeBatchAdvancedOverlayView>, trackedBarcode: TrackedBarcode): Promise<void>;
    setAnchorForTrackedBarcode(anchor: Anchor, trackedBarcode: TrackedBarcode): Promise<void>;
    setOffsetForTrackedBarcode(offset: PointWithUnit, trackedBarcode: TrackedBarcode): Promise<void>;
    clearTrackedBarcodeViews(): Promise<void>;
    updateSizeOfTrackedBarcodeView(trackedBarcodeIdentifier: number, width: number, height: number): Promise<void>;
}
