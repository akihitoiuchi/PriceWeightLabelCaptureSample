import { Brush, EventEmitter, BaseNewController } from "scandit-datacapture-frameworks-core";
import { TrackedBarcode } from "../../barcode";
import { BarcodeBatchBasicOverlay } from "../BarcodeBatchBasicOverlay";
export declare enum BarcodeBatchBasicOverlayListenerEvents {
    brushForTrackedBarcode = "BarcodeBatchBasicOverlayListener.brushForTrackedBarcode",
    didTapTrackedBarcode = "BarcodeBatchBasicOverlayListener.didTapTrackedBarcode"
}
export interface BarcodeBatchBasicOverlayProxy {
    $setBrushForTrackedBarcode({ dataCaptureViewId, brushJson, trackedBarcodeIdentifier, sessionFrameSequenceID }: {
        dataCaptureViewId: number;
        brushJson: string | null;
        trackedBarcodeIdentifier: number;
        sessionFrameSequenceID: number | null;
    }): Promise<void>;
    $clearTrackedBarcodeBrushes(): Promise<void>;
    $registerListenerForBasicOverlayEvents({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): void;
    $unregisterListenerForBasicOverlayEvents({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): void;
    $updateBarcodeBatchBasicOverlay({ dataCaptureViewId, overlayJson }: {
        dataCaptureViewId: number;
        overlayJson: string;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export interface TrackedBarcodeEventPayload {
    trackedBarcode: string;
}
export declare class BarcodeBatchBasicOverlayController extends BaseNewController<BarcodeBatchBasicOverlayProxy> {
    private overlay;
    private boundHandleBrushForTrackedBarcode;
    private boundHandleDidTapTrackedBarcode;
    static forOverlay(overlay: BarcodeBatchBasicOverlay): BarcodeBatchBasicOverlayController;
    private constructor();
    setBrushForTrackedBarcode(brush: Brush | null, trackedBarcode: TrackedBarcode): Promise<void>;
    clearTrackedBarcodeBrushes(): Promise<void>;
    updateBarcodeBatchBasicOverlay(): Promise<void>;
    subscribeListener(): void;
    private handleBrushForTrackedBarcode;
    private handleDidTapTrackedBarcode;
    unsubscribeListener(): void;
    private get dataCaptureViewId();
    dispose(): void;
}
