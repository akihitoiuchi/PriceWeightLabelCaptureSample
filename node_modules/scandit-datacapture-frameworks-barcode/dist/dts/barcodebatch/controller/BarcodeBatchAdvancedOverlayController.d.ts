import { Brush, Anchor, PointWithUnit, BaseNewController, EventEmitter } from "scandit-datacapture-frameworks-core";
import { TrackedBarcode } from "../../barcode";
import { BaseBarcodeBatchAdvancedOverlay } from "../private/BarcodeBatchAdvancedOverlay";
import { BarcodeBatchAdvancedOverlayView } from "../private/BarcodeBatchAdvancedOverlayView";
export declare enum BarcodeBatchAdvancedOverlayListenerEvents {
    didTapViewForTrackedBarcode = "BarcodeBatchAdvancedOverlayListener.didTapViewForTrackedBarcode",
    viewForTrackedBarcode = "BarcodeBatchAdvancedOverlayListener.viewForTrackedBarcode",
    anchorForTrackedBarcode = "BarcodeBatchAdvancedOverlayListener.anchorForTrackedBarcode",
    offsetForTrackedBarcode = "BarcodeBatchAdvancedOverlayListener.offsetForTrackedBarcode"
}
export interface BarcodeBatchAdvancedOverlayProxy {
    $setBrushForTrackedBarcode({ dataCaptureViewId, brushJson, trackedBarcodeIdentifier, sessionFrameSequenceID }: {
        dataCaptureViewId: number;
        brushJson: string;
        trackedBarcodeIdentifier: number;
        sessionFrameSequenceID: number | null;
    }): Promise<void>;
    $setViewForTrackedBarcode({ dataCaptureViewId, viewJson, trackedBarcodeIdentifier, sessionFrameSequenceID }: {
        dataCaptureViewId: number;
        viewJson: object | string | null;
        trackedBarcodeIdentifier: number;
        sessionFrameSequenceID: number | null;
    }): Promise<void>;
    $updateSizeOfTrackedBarcodeView({ dataCaptureViewId, trackedBarcodeIdentifier, width, height }: {
        dataCaptureViewId: number;
        trackedBarcodeIdentifier: number;
        width: number;
        height: number;
    }): Promise<void>;
    $setAnchorForTrackedBarcode({ dataCaptureViewId, anchor, trackedBarcodeIdentifier, sessionFrameSequenceID }: {
        dataCaptureViewId: number;
        anchor: Anchor;
        trackedBarcodeIdentifier: number;
        sessionFrameSequenceID: number | null;
    }): Promise<void>;
    $setOffsetForTrackedBarcode({ dataCaptureViewId, offsetJson, trackedBarcodeIdentifier, sessionFrameSequenceID }: {
        dataCaptureViewId: number;
        offsetJson: string;
        trackedBarcodeIdentifier: number;
        sessionFrameSequenceID: number | null;
    }): Promise<void>;
    $clearTrackedBarcodeViews({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): Promise<void>;
    $registerListenerForAdvancedOverlayEvents({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): void;
    $unregisterListenerForAdvancedOverlayEvents({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): void;
    $updateBarcodeBatchAdvancedOverlay({ dataCaptureViewId, overlayJson }: {
        dataCaptureViewId: number;
        overlayJson: string;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export declare class BarcodeBatchAdvancedOverlayController extends BaseNewController<BarcodeBatchAdvancedOverlayProxy> {
    private overlay;
    private boundHandleViewForTrackedBarcode;
    private boundHandleAnchorForTrackedBarcode;
    private boundHandleOffsetForTrackedBarcode;
    private boundHandleDidTapViewForTrackedBarcode;
    static forOverlay(overlay: BaseBarcodeBatchAdvancedOverlay): BarcodeBatchAdvancedOverlayController;
    private constructor();
    setBrushForTrackedBarcode(brush: Brush, trackedBarcode: TrackedBarcode): Promise<void>;
    setViewForTrackedBarcode(view: BarcodeBatchAdvancedOverlayView | Promise<BarcodeBatchAdvancedOverlayView>, trackedBarcode: TrackedBarcode): Promise<void>;
    updateSizeOfTrackedBarcodeView(trackedBarcodeIdentifier: number, width: number, height: number): Promise<void>;
    private getJSONStringForView;
    private isSerializeable;
    setAnchorForTrackedBarcode(anchor: Anchor, trackedBarcode: TrackedBarcode): Promise<void>;
    setOffsetForTrackedBarcode(offset: PointWithUnit, trackedBarcode: TrackedBarcode): Promise<void>;
    clearTrackedBarcodeViews(): Promise<void>;
    updateBarcodeBatchAdvancedOverlay(): Promise<void>;
    subscribeListener(): void;
    private handleViewForTrackedBarcode;
    private handleAnchorForTrackedBarcode;
    private handleOffsetForTrackedBarcode;
    private handleDidTapViewForTrackedBarcode;
    unsubscribeListener(): void;
    private get dataCaptureViewId();
    dispose(): void;
}
