import { BaseNewController, EventEmitter } from "scandit-datacapture-frameworks-core";
import { BarcodeBatch } from "../BarcodeBatch";
import { BarcodeBatchSettings } from "../BarcodeBatchSettings";
export interface BarcodeBatchListenerProxy {
    isModeEnabled: () => boolean;
    $resetBarcodeBatchSession(): Promise<void>;
    $registerBarcodeBatchListenerForEvents({ modeId }: {
        modeId: number;
    }): void;
    $unregisterBarcodeBatchListenerForEvents({ modeId }: {
        modeId: number;
    }): void;
    $finishBarcodeBatchDidUpdateSessionCallback({ modeId, enabled }: {
        modeId: number;
        enabled: boolean;
    }): void;
    $setBarcodeBatchModeEnabledState({ modeId, enabled }: {
        modeId: number;
        enabled: boolean;
    }): void;
    $updateBarcodeBatchMode({ modeJson }: {
        modeJson: string;
    }): Promise<void>;
    $applyBarcodeBatchModeSettings({ modeId, modeSettingsJson }: {
        modeId: number;
        modeSettingsJson: string;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export declare enum BarcodeBatchListenerEvents {
    didUpdateSession = "BarcodeBatchListener.didUpdateSession"
}
export interface BarcodeBatchSessionEventPayload {
    session: string;
    frameId: string | null;
    modeId: number | null;
}
export declare class BarcodeBatchListenerController extends BaseNewController<BarcodeBatchListenerProxy> {
    private mode;
    private boundHandleDidUpdateSessionEvent;
    static forBarcodeBatch(barcodeBatch: BarcodeBatch): BarcodeBatchListenerController;
    private constructor();
    resetSession(): Promise<void>;
    subscribeListener(): void;
    unsubscribeListener(): void;
    dispose(): void;
    setModeEnabledState(enabled: boolean): void;
    updateBarcodeBatchMode(): Promise<void>;
    applyBarcodeBatchModeSettings(newSettings: BarcodeBatchSettings): Promise<void>;
    private handleDidUpdateSessionEvent;
    private notifyListenersOfDidUpdateSession;
}
