import { Brush, Color, DataCaptureContext } from "scandit-datacapture-frameworks-core";
import { SparkScan } from "./SparkScan";
import { SparkScanViewUiListener } from "./SparkScanViewUiListener";
import { SparkScanViewSettings } from "./SparkScanViewSettings";
import { SparkScanFeedbackDelegate } from "./SparkScanFeedbackDelegate";
import { BaseSparkScanViewProps } from "./BaseSparkScanViewProps";
export interface SparkScanView {
}
export declare class BaseSparkScanView implements SparkScanView {
    private _sparkScan;
    context: DataCaptureContext;
    private _controller;
    private _viewId;
    get viewId(): number;
    private _uiListener;
    get uiListener(): SparkScanViewUiListener | null;
    set uiListener(listener: SparkScanViewUiListener | null);
    private _viewSettings;
    private _brush;
    _feedbackDelegate: SparkScanFeedbackDelegate | null;
    private _previewSizeControlVisible;
    private _cameraSwitchButtonVisible;
    private _scanningBehaviorButtonVisible;
    private _barcodeCountButtonVisible;
    private _barcodeFindButtonVisible;
    private _targetModeButtonVisible;
    private _labelCaptureButtonVisible;
    private _toolbarBackgroundColor;
    private _toolbarIconActiveTintColor;
    private _toolbarIconInactiveTintColor;
    private _triggerButtonAnimationColor;
    private _triggerButtonExpandedColor;
    private _triggerButtonCollapsedColor;
    private _triggerButtonTintColor;
    private _triggerButtonVisible;
    private _triggerButtonImage;
    private _torchControlVisible;
    private _previewCloseControlVisible;
    static forContext(context: DataCaptureContext, sparkScan: SparkScan, settings: SparkScanViewSettings | null): BaseSparkScanView;
    static withProps(props: BaseSparkScanViewProps): BaseSparkScanView;
    static get defaultBrush(): Brush;
    private constructor();
    get previewSizeControlVisible(): boolean;
    set previewSizeControlVisible(newValue: boolean);
    /**
     * @deprecated The torch button has been moved to the mini preview. Use property `torchControlVisible` instead.
     */
    get torchButtonVisible(): boolean;
    /**
     * @deprecated The torch button has been moved to the mini preview. Use property `torchControlVisible` instead.
     */
    set torchButtonVisible(newValue: boolean);
    get torchControlVisible(): boolean;
    set torchControlVisible(newValue: boolean);
    get previewCloseControlVisible(): boolean;
    set previewCloseControlVisible(newValue: boolean);
    get scanningBehaviorButtonVisible(): boolean;
    set scanningBehaviorButtonVisible(newValue: boolean);
    get barcodeCountButtonVisible(): boolean;
    set barcodeCountButtonVisible(newValue: boolean);
    get barcodeFindButtonVisible(): boolean;
    set barcodeFindButtonVisible(newValue: boolean);
    get targetModeButtonVisible(): boolean;
    set targetModeButtonVisible(newValue: boolean);
    get labelCaptureButtonVisible(): boolean;
    set labelCaptureButtonVisible(newValue: boolean);
    /**
     * @deprecated The trigger button no longer displays text.
     */
    get stopCapturingText(): string | null;
    /**
     * @deprecated The trigger button no longer displays text.
     */
    set stopCapturingText(newValue: string | null);
    /**
     * @deprecated The trigger button no longer displays text.
     */
    get startCapturingText(): string | null;
    /**
     * @deprecated The trigger button no longer displays text.
     */
    set startCapturingText(newValue: string | null);
    /**
     * @deprecated The trigger button no longer displays text.
     */
    get resumeCapturingText(): string | null;
    /**
     * @deprecated The trigger button no longer displays text.
     */
    set resumeCapturingText(newValue: string | null);
    /**
     * @deprecated The trigger button no longer displays text.
     */
    get scanningCapturingText(): string | null;
    /**
     * @deprecated The trigger button no longer displays text.
     */
    set scanningCapturingText(newValue: string | null);
    /**
     * @deprecated This property is not relevant anymore.
     */
    get captureButtonActiveBackgroundColor(): Color | null;
    /**
     * @deprecated This property is not relevant anymore.
     */
    set captureButtonActiveBackgroundColor(newValue: Color | null);
    /**
     * @deprecated Use triggerButtonCollapsedColor and triggerButtonExpandedColor instead.
     */
    get captureButtonBackgroundColor(): Color | null;
    /**
     * @deprecated Use triggerButtonCollapsedColor and triggerButtonExpandedColor instead.
     */
    set captureButtonBackgroundColor(newValue: Color | null);
    /**
     * @deprecated use triggerButtonTintColor instead.
     */
    get captureButtonTintColor(): Color | null;
    /**
     * @deprecated use triggerButtonTintColor instead.
     */
    set captureButtonTintColor(newValue: Color | null);
    get toolbarBackgroundColor(): Color | null;
    set toolbarBackgroundColor(newValue: Color | null);
    get toolbarIconActiveTintColor(): Color | null;
    set toolbarIconActiveTintColor(newValue: Color | null);
    get toolbarIconInactiveTintColor(): Color | null;
    set toolbarIconInactiveTintColor(newValue: Color | null);
    get cameraSwitchButtonVisible(): boolean;
    set cameraSwitchButtonVisible(newValue: boolean);
    get triggerButtonAnimationColor(): Color | null;
    set triggerButtonAnimationColor(newValue: Color | null);
    get triggerButtonExpandedColor(): Color | null;
    set triggerButtonExpandedColor(newValue: Color | null);
    get triggerButtonCollapsedColor(): Color | null;
    set triggerButtonCollapsedColor(newValue: Color | null);
    get triggerButtonTintColor(): Color | null;
    set triggerButtonTintColor(newValue: Color | null);
    get triggerButtonImage(): string | null;
    set triggerButtonImage(newValue: string | null);
    get triggerButtonVisible(): boolean;
    set triggerButtonVisible(newValue: boolean);
    showToast(text: string): void;
    prepareScanning(): void;
    startScanning(): void;
    pauseScanning(): void;
    stopScanning(): void;
    private update;
    dispose(): void;
    show(): Promise<void>;
    hide(): Promise<void>;
    createNativeView(viewId: number): Promise<void>;
    get feedbackDelegate(): SparkScanFeedbackDelegate | null;
    set feedbackDelegate(delegate: SparkScanFeedbackDelegate | null);
    updateWithProps(prevProps: BaseSparkScanViewProps, props: BaseSparkScanViewProps): void;
    private _show;
    private _hide;
    private static get sparkScanDefaults();
    toJSON(): object;
}
