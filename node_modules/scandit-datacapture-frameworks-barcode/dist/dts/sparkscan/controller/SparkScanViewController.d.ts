import { BaseNewController, EventPayload } from "scandit-datacapture-frameworks-core";
import { BaseSparkScanView } from "../SparkScanView";
import { SparkScan } from "../SparkScan";
export interface SparkScanViewProxy {
    $updateSparkScanView({ viewId, viewJson }: {
        viewId: number;
        viewJson: string;
    }): Promise<void>;
    $createSparkScanView({ viewId, viewJson }: {
        viewId: number;
        viewJson: string;
    }): Promise<void>;
    $disposeSparkScanView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $showSparkScanView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $hideSparkScanView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $showSparkScanViewToast({ viewId, text }: {
        viewId: number;
        text: string;
    }): Promise<void>;
    $stopSparkScanViewScanning({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $startSparkScanViewScanning({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $pauseSparkScanViewScanning({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $prepareSparkScanViewScanning({ viewId }: {
        viewId: number;
    }): Promise<void>;
    on$barcodeFindButtonTapped: (ev: EventPayload) => Promise<void>;
    on$barcodeCountButtonTapped: (ev: EventPayload) => Promise<void>;
    on$labelCaptureButtonTapped: (ev: EventPayload) => Promise<void>;
    on$didChangeViewState: (ev: EventPayload) => Promise<void>;
    on$feedbackForBarcode: (ev: EventPayload) => Promise<void>;
    $registerSparkScanFeedbackDelegateForEvents({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterSparkScanFeedbackDelegateForEvents({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $submitSparkScanFeedbackForBarcode({ viewId, feedbackJson }: {
        viewId: number;
        feedbackJson: string;
    }): Promise<void>;
    $registerSparkScanViewListenerEvents({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterSparkScanViewListenerEvents({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $resetSparkScanSession({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $updateSparkScanMode({ viewId, modeJson }: {
        viewId: number;
        modeJson: string;
    }): Promise<void>;
    $registerSparkScanListenerForEvents({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterSparkScanListenerForEvents({ viewId }: {
        viewId: number;
    }): Promise<void>;
    on$didUpdateSession: (ev: EventPayload) => Promise<void>;
    on$didScan: (ev: EventPayload) => Promise<void>;
    $finishSparkScanDidUpdateSession({ viewId, isEnabled }: {
        viewId: number;
        isEnabled: boolean;
    }): Promise<void>;
    $finishSparkScanDidScan({ viewId, isEnabled }: {
        viewId: number;
        isEnabled: boolean;
    }): Promise<void>;
    $setSparkScanModeEnabledState({ viewId, isEnabled }: {
        viewId: number;
        isEnabled: boolean;
    }): Promise<void>;
    dispose(): void;
}
export declare enum SparkScanViewEvents {
    barcodeFindButtonTapped = "SparkScanViewUiListener.barcodeFindButtonTapped",
    barcodeCountButtonTapped = "SparkScanViewUiListener.barcodeCountButtonTapped",
    labelCaptureButtonTapped = "SparkScanViewUiListener.labelCaptureButtonTapped",
    didChangeViewState = "SparkScanViewUiListener.didChangeViewState",
    feedbackForBarcode = "SparkScanFeedbackDelegate.feedbackForBarcode",
    didUpdateSession = "SparkScanListener.didUpdateSession",
    didScan = "SparkScanListener.didScan"
}
export interface SparkScanSessionEventPayload {
    session: string;
    frameId: string | null;
    viewId: number;
}
export declare class SparkScanViewController extends BaseNewController<SparkScanViewProxy> {
    private view;
    private sparkScan;
    private hasFeedbackDelegateListener;
    private hasNativeViewListenerSubscriptions;
    private hasNativeModeListenerSubscriptions;
    private viewInstanceId;
    static forSparkScanView(view: BaseSparkScanView, sparkScan: SparkScan): SparkScanViewController;
    private constructor();
    private initialize;
    dispose(): void;
    subscribeViewListeners(): void;
    unsubscribeViewListeners(): void;
    createView(): Promise<void>;
    updateView(): Promise<void>;
    stopScanning(): Promise<void>;
    pauseScanning(): Promise<void>;
    startScanning(): Promise<void>;
    prepareScanning(): Promise<void>;
    showToast(text: string): Promise<void>;
    showView(): Promise<void>;
    hideView(): Promise<void>;
    addFeedbackDelegate(): void;
    removeFeedbackDelegate(): void;
    resetSession(): Promise<void>;
    updateMode(): Promise<void>;
    subscribeModeListener(): void;
    unsubscribeModeListener(): void;
    setModeEnabledState(enabled: boolean): void;
    private get isViewCreated();
    private handleFeedbackForBarcode;
    private readonly didUpdateSessionListener;
    private notifyListenersOfDidUpdateSession;
    private readonly didScanListener;
    private notifyListenersOfDidScan;
    private readonly barcodeCountButtonTappedListener;
    private readonly barcodeFindButtonTappedListener;
    private readonly labelCaptureButtonTappedListener;
    private readonly didChangeViewStateListener;
}
