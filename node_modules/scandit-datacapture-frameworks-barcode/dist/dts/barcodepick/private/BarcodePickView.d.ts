import { CameraSettings, DataCaptureContext, DefaultSerializeable } from 'scandit-datacapture-frameworks-core';
import { BarcodePickActionListener } from '../BarcodePickActionListener';
import { BarcodePick } from '../BarcodePick';
import { BarcodePickViewSettings } from '../BarcodePickViewSettings';
import { BarcodePickViewUiListener } from '../BarcodePickViewUiListener';
import { BarcodePickViewListener } from '../BarcodePickViewListener';
export interface BarcodePickView {
}
export declare class BaseBarcodePickView extends DefaultSerializeable implements BarcodePickView {
    barcodePick: BarcodePick;
    settings: BarcodePickViewSettings;
    cameraSettings: CameraSettings;
    private viewController;
    private actionListeners;
    private listeners;
    private isStarted;
    private _context;
    private isViewCreated;
    private _viewId;
    get viewId(): number;
    get context(): DataCaptureContext | null;
    set context(context: DataCaptureContext | null);
    private _barcodePickViewUiListener;
    get uiListener(): BarcodePickViewUiListener | null;
    set uiListener(value: BarcodePickViewUiListener | null);
    constructor({ context, barcodePick, settings, cameraSettings, }: {
        context: DataCaptureContext | null;
        barcodePick: BarcodePick;
        settings: BarcodePickViewSettings;
        cameraSettings: CameraSettings;
    });
    initialize(nativeView?: BarcodePickView): void;
    createNativeView(viewId: number): Promise<void>;
    removeNativeView(): Promise<void>;
    dispose(): void;
    start(): void;
    stop(): void;
    freeze(): void;
    pause(): void;
    resume(): void;
    reset(): void;
    addActionListener(listener: BarcodePickActionListener): void;
    private checkAndSubscribeActionListeners;
    removeActionListener(listener: BarcodePickActionListener): void;
    private checkAndUnsubscribeActionListeners;
    addListener(listener: BarcodePickViewListener): void;
    private checkAndSubscribeListeners;
    removeListener(listener: BarcodePickViewListener): void;
    private checkAndUnsubscribeListeners;
    toJSON(): object;
}
export interface PrivateBarcodePickView {
    listeners: BarcodePickViewListener[];
    actionListeners: BarcodePickActionListener[];
    toJSON(): object;
}
