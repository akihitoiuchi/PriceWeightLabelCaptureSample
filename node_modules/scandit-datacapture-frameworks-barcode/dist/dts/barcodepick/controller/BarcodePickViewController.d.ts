import { BaseNewController, EventEmitter } from 'scandit-datacapture-frameworks-core';
import { BarcodePickView, BaseBarcodePickView } from '../private/BarcodePickView';
import { BarcodePickViewUiListener } from '../BarcodePickViewUiListener';
import { BarcodePickAsyncMapperProductProviderCallback } from '../BarcodePickAsyncMapperProductProviderCallback';
import { BarcodePickProductProviderCallbackItem } from '../BarcodePickProductProviderCallbackItem';
export interface BarcodePickViewProxy {
    $pickViewStart({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $pickViewFreeze({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $pickViewStop({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $pickViewReset({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $pickViewPause({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $pickViewResume({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $finishPickAction({ viewId, code, result }: {
        viewId: number;
        code: string;
        result: boolean;
    }): Promise<void>;
    $createPickView({ viewId, json }: {
        viewId: number;
        json: string;
    }): Promise<void>;
    $removePickView({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $updatePickView({ viewId, json }: {
        viewId: number;
        json: string;
    }): Promise<void>;
    $addBarcodePickListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $removeBarcodePickListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $addBarcodePickScanningListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $removeBarcodePickScanningListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $addPickActionListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $removePickActionListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $addPickViewListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $removePickViewListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $registerBarcodePickViewUiListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterBarcodePickViewUiListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $registerOnProductIdentifierForItemsListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $unregisterOnProductIdentifierForItemsListener({ viewId }: {
        viewId: number;
    }): Promise<void>;
    $finishOnProductIdentifierForItems({ viewId, itemsJson }: {
        viewId: number;
        itemsJson: string;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export interface PrivateBarcodeItemDataEventPayload {
    itemData: string;
}
export declare enum BarcodePickViewEvents {
    didStartScanning = "BarcodePickViewListener.didStartScanning",
    didFreezeScanning = "BarcodePickViewListener.didFreezeScanning",
    didPauseScanning = "BarcodePickViewListener.didPauseScanning",
    didStopScanning = "BarcodePickViewListener.didStopScanning"
}
export declare enum BarcodePickViewUiEvents {
    didTapFinishButton = "BarcodePickViewUiListener.didTapFinishButton"
}
export declare enum BarcodePickAsyncMapperProductProviderEvents {
    onProductIdentifierForItems = "BarcodePickAsyncMapperProductProviderCallback.onProductIdentifierForItems"
}
export declare enum BarcodePickScanningEvents {
    didCompleteScanningSession = "BarcodePickScanningListener.didCompleteScanningSession",
    didUpdateScanningSession = "BarcodePickScanningListener.didUpdateScanningSession"
}
export declare enum BarcodePickActionEvents {
    didPick = "BarcodePickActionListener.didPick",
    didUnpick = "BarcodePickActionListener.didUnpick"
}
export declare enum BarcodePickListenerEvents {
    didUpdateSession = "BarcodePickListener.didUpdateSession"
}
export declare class BarcodePickViewController extends BaseNewController<BarcodePickViewProxy> {
    private view;
    private barcodePick;
    private nativeView?;
    private eventHandlers;
    private isListeningForPickListeners;
    private isListeningForScanningListeners;
    private isListeningForActionListeners;
    private isListeningForViewListeners;
    private isListeningForViewUiListeners;
    private isListeningForProductListeners;
    static forBarcodePick(view: BaseBarcodePickView, nativeView?: BarcodePickView): BarcodePickViewController;
    private constructor();
    private initialize;
    start(): Promise<void>;
    stop(): Promise<void>;
    freeze(): Promise<void>;
    reset(): Promise<void>;
    pause(): Promise<void>;
    resume(): Promise<void>;
    finishPickAction(itemData: string, result: boolean): Promise<void>;
    createNativeView(): Promise<void>;
    removeNativeView(): Promise<void>;
    private create;
    dispose(): void;
    subscribeScanningListener(): Promise<void>;
    unsubscribeScanningListener(): Promise<void>;
    subscribePickListener(): Promise<void>;
    unsubscribePickListener(): Promise<void>;
    registerUiListener(): Promise<void>;
    unregisterUiListener(): Promise<void>;
    setUiListener(listener: BarcodePickViewUiListener | null): Promise<void>;
    subscribeActionListeners(): Promise<void>;
    unsubscribeActionListeners(): Promise<void>;
    subscribePickViewListeners(): Promise<void>;
    unsubscribePickViewListeners(): Promise<void> | undefined;
    registerProductListener(callback: BarcodePickAsyncMapperProductProviderCallback): Promise<void>;
    unregisterProductListener(): Promise<void>;
    finishOnProductIdentifierForItems(data: BarcodePickProductProviderCallbackItem[]): Promise<void>;
    private get isViewCreated();
}
