import { PointWithUnit, Anchor, BaseController, EventEmitter } from 'scandit-datacapture-frameworks-core';
import { LabelCaptureAdvancedOverlayView } from '../view/LabelCaptureAdvancedOverlayView';
import { LabelCaptureAdvancedOverlay } from '../view/LabelCaptureAdvancedOverlay';
import { CapturedLabel } from '../CapturedLabel';
import { LabelField } from '../LabelField';
export declare enum LabelCaptureAdvancedOverlayListenerEvents {
    viewForLabel = "LabelCaptureAdvancedOverlayListener.viewForLabel",
    anchorForLabel = "LabelCaptureAdvancedOverlayListener.anchorForLabel",
    offsetForLabel = "LabelCaptureAdvancedOverlayListener.offsetForLabel",
    viewForCapturedLabelField = "LabelCaptureAdvancedOverlayListener.viewForFieldOfLabel",
    anchorForCapturedLabelField = "LabelCaptureAdvancedOverlayListener.anchorForFieldOfLabel",
    offsetForCapturedLabelField = "LabelCaptureAdvancedOverlayListener.offsetForFieldOfLabel"
}
export interface LabelCaptureAdvancedOverlayProxy {
    $setViewForCapturedLabel({ dataCaptureViewId, jsonView, trackingId }: {
        dataCaptureViewId: number;
        jsonView: string | null;
        trackingId: number;
    }): Promise<void>;
    $setAnchorForCapturedLabel({ dataCaptureViewId, anchor, trackingId }: {
        dataCaptureViewId: number;
        anchor: Anchor;
        trackingId: number;
    }): Promise<void>;
    $setOffsetForCapturedLabel({ dataCaptureViewId, offsetJson, trackingId }: {
        dataCaptureViewId: number;
        offsetJson: string;
        trackingId: number;
    }): Promise<void>;
    $setViewForCapturedLabelField({ dataCaptureViewId, view, identifier }: {
        dataCaptureViewId: number;
        view: string | null;
        identifier: string;
    }): Promise<void>;
    $setAnchorForCapturedLabelField({ dataCaptureViewId, anchor, identifier }: {
        dataCaptureViewId: number;
        anchor: Anchor;
        identifier: string;
    }): Promise<void>;
    $setOffsetForCapturedLabelField({ dataCaptureViewId, offset, identifier }: {
        dataCaptureViewId: number;
        offset: string;
        identifier: string;
    }): Promise<void>;
    $clearCapturedLabelViews({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): Promise<void>;
    $registerListenerForAdvancedOverlayEvents({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): Promise<void>;
    $unregisterListenerForAdvancedOverlayEvents({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): Promise<void>;
    $updateLabelCaptureAdvancedOverlay({ dataCaptureViewId, advancedOverlayJson }: {
        dataCaptureViewId: number;
        advancedOverlayJson: string;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export declare class LabelCaptureAdvancedOverlayController extends BaseController<LabelCaptureAdvancedOverlayProxy> {
    private overlay;
    private constructor();
    static forOverlay(overlay: LabelCaptureAdvancedOverlay): LabelCaptureAdvancedOverlayController;
    setViewForCapturedLabel(label: CapturedLabel, view: LabelCaptureAdvancedOverlayView | null): Promise<void>;
    setAnchorForCapturedLabel(label: CapturedLabel, anchor: Anchor): Promise<void>;
    setOffsetForCapturedLabel(label: CapturedLabel, offset: PointWithUnit): Promise<void>;
    setViewForCapturedLabelField(label: CapturedLabel, field: LabelField, view: LabelCaptureAdvancedOverlayView | null): Promise<void>;
    private setViewForCapturedLabelFieldPrivate;
    setAnchorForCapturedLabelField(label: CapturedLabel, field: LabelField, anchor: Anchor): Promise<void>;
    private setAnchorForCapturedLabelFieldPrivate;
    setOffsetForCapturedLabelField(label: CapturedLabel, field: LabelField, offset: PointWithUnit): Promise<void>;
    private setOffsetForCapturedLabelFieldPrivate;
    clearCapturedLabelViews(): Promise<void>;
    subscribeListener(): void;
    private handleViewForLabel;
    private handleAnchorForLabel;
    private handleViewForCapturedLabelField;
    private handleOffsetForLabel;
    private handleAnchorForCapturedLabelField;
    private handleOffsetForCapturedLabelField;
    unsubscribeListener(): void;
    dispose(): void;
    updateAdvancedOverlay(advancedOverlayJson: string): Promise<void>;
    private get dataCaptureViewId();
}
export interface LabelCaptureAdvancedOverlayEventPayload {
    label: string;
}
export interface LabelCaptureAdvancedOverlayFieldEventPayload {
    field: string;
    identifier: string;
}
