import { BaseController, EventEmitter } from 'scandit-datacapture-frameworks-core';
import { LabelCaptureValidationFlowOverlay } from '../view/LabelCaptureValidationFlowOverlay';
import { LabelCapture } from '../LabelCapture';
export interface LabelCaptureValidationFlowListenerEventPayload {
    fields: string[];
}
export declare enum LabelCaptureValidationFlowListenerEvents {
    didCaptureLabelWithFields = "LabelCaptureValidationFlowListener.didCaptureLabelWithFields"
}
export interface LabelCaptureValidationFlowOverlayProxy {
    $registerListenerForValidationFlowEvents({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): Promise<void>;
    $unregisterListenerForValidationFlowEvents({ dataCaptureViewId }: {
        dataCaptureViewId: number;
    }): Promise<void>;
    $updateLabelCaptureValidationFlowOverlay({ dataCaptureViewId, overlayJson }: {
        dataCaptureViewId: number;
        overlayJson: string;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export declare class LabelCaptureValidationFlowOverlayController extends BaseController<LabelCaptureValidationFlowOverlayProxy> {
    private overlay;
    private isSubscribed;
    private constructor();
    static forOverlay(overlay: LabelCaptureValidationFlowOverlay): LabelCaptureValidationFlowOverlayController;
    updateValidationFlowOverlay(): Promise<void>;
    subscribeLabelCaptureValidationFlowListener(): void;
    unsubscribeLabelCaptureValidationFlowListener(): void;
    private handleDidCaptureLabelWithFieldsEvent;
    private notifyListenersOfDidCaptureLabelWithFields;
    private get dataCaptureViewId();
    dispose(): void;
}
export interface PrivateLabelCaptureValidationFlowOverlay {
    mode: LabelCapture;
}
