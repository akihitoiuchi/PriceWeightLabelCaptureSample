import { BaseController, EventEmitter } from "scandit-datacapture-frameworks-core";
import { LabelCapture } from "../LabelCapture";
export declare enum LabelCaptureListenerEvents {
    didUpdateSession = "LabelCaptureListener.didUpdateSession"
}
export interface LabelCaptureSessionEventPayload {
    session: string;
    isBarcodeArFull: boolean | null;
}
export interface LabelCaptureProxy {
    $setModeEnabledState({ modeId, isEnabled }: {
        modeId: number;
        isEnabled: boolean;
    }): Promise<void>;
    $updateLabelCaptureSettings({ modeId, settingsJson }: {
        modeId: number;
        settingsJson: string;
    }): Promise<void>;
    $registerListenerForEvents({ modeId }: {
        modeId: number;
    }): Promise<void>;
    $unregisterListenerForEvents({ modeId }: {
        modeId: number;
    }): Promise<void>;
    $finishDidUpdateSessionCallback({ isEnabled }: {
        isEnabled: boolean;
    }): Promise<void>;
    subscribeForEvents(events: string[]): void;
    unsubscribeFromEvents(events: string[]): void;
    dispose(): void;
    eventEmitter: EventEmitter;
}
export declare class LabelCaptureController extends BaseController<LabelCaptureProxy> {
    private mode;
    constructor(mode: LabelCapture);
    setModeEnabledState(isEnabled: boolean): Promise<void>;
    updateLabelCaptureSettings(settingsJson: string): Promise<void>;
    subscribeLabelCaptureListener(): Promise<void>;
    private handleDidUpdateSessionEvent;
    unsubscribeLabelCaptureListener(): Promise<void>;
    private notifyListenersOfDidUpdateSession;
}
